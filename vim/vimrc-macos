" ------------------------------------------------------------------------------
" Use pathogen for easier vim plugins
" ------------------------------------------------------------------------------
execute pathogen#infect()
execute pathogen#helptags()

" ------------------------------------------------------------------------------
"  THEME SETTINGS
" ------------------------------------------------------------------------------
" Different background/color scheme for GUI and terminal mode
if has('gui_running')
    colorscheme solarized
    set background=dark
else
    colorscheme badwolf
    set background=dark
endif

" ------------------------------------------------------------------------------
"  GENERAL SETTINGS
" ------------------------------------------------------------------------------

set number                    " line number

filetype plugin on
filetype plugin indent on

syntax on                     " syntax highlighting
set tabstop=2                 " tab = 2 spaces in lenght
set shiftwidth=2              
set softtabstop=2             " treat 2 spaces as tab
set textwidth=90
set autoindent                " auto indentation
set smartindent               " smart indentation
set expandtab                 " tab inserts spaces
set hlsearch                  " highlight the search terms 
hi clear search
set ruler
set stal=1                    " show cursor postion
set history=50                " remember 50 commands
set bs=2                      " free backspacing in insert mode
set visualbell                " NO beeping
set wrap                      " wrap long lines, else "set nowrap
set linebreak                 " don't break words in wrap mode
set nocompatible              " vim defaults
"set spell spelllang=nl "spellchecking for dutch (disabled)
set tabpagemax=50
set undofile " Maintain undo history between sessions
set undodir=~/.vim/undodir
"set laststatus=2              " always show statusline
"set statusline=\ %F%m%r%h\ %w\ \ Line:\ %l/%L:%c   "format statusline

" in makefiles, don't expand tabs to spaces, since actual tab characters are
" needed, and have indentation at 8 chars to be sure that all indents are tabs
" (despite the mappings later):
autocmd FileType make set noexpandtab shiftwidth=8

" Show tabs and EOL characters
set list
set listchars=eol:¬,tab:▸.

let g:tex_flavor = "latex"             " TeX is LaTeX

" Mac Vim font for retina display
"set guifont=Menlo\ Regular:h12
set guifont=Meslo\ Lg\ S\ Regular\ for\ Powerline:h14

" ------------------------------------------------------------------------------
" clang-format
" ------------------------------------------------------------------------------
let g:clang_format#code_style = "llvm"
let g:clang_format#detect_style_file = 1
let g:clang_format#auto_format_on_insert_leave = 1
let g:clang_format#style_options = {
             \ "BreakConstructorInitializerBeforeComma" : "true",
             \ "ConstructorInitializerAllOnOneLineOrOnePerLine" : "true",
             \ "Cpp11BracedListStyle" : "true",
             \ "SpaceAfterControlStatementKeyword" : "true",
             \ "PointersBindToType" : "true",
             \ "AllowShortIfStatementsOnASingleLine" : "true",
             \ "AlwaysBreakTemplateDeclarations" : "true",
             \ "ColumnLimit": "90",
             \ "Standard" : "C++17"}
" map to <Leader>cf in C++ code
autocmd FileType c,cpp,objc nnoremap <buffer><C-k> :<C-u>ClangFormat<CR>
autocmd FileType c,cpp,objc vnoremap <buffer><C-k> :ClangFormat<CR>
" if you install vim-operator-user
"autocmd FileType c,cpp,objc map <buffer><Leader>x <Plug>(operator-clang-format)
" Toggle auto formatting:
nmap <Leader>C :ClangFormatAutoToggle<CR>
" Auto-enable auto-formatting
"autocmd FileType c,cpp,objc ClangFormatAutoEnable

" ------------------------------------------------------------------------------
" YCM auto-complete
" ------------------------------------------------------------------------------
let g:ycm_global_ycm_extra_conf = "~/.vim/ycm_extra_conf.py"
"let g:ycm_extra_conf_globlist = ["~/Dropbox/Work/Tools/LIGEN/*"]

" for now no diagnostics as XCode catches up with C++17...
let g:ycm_enable_diagnostic_signs = 0 
let g:ycm_enable_diagnostic_highlighting = 0

" ------------------------------------------------------------------------------
" NERDTREE
" ------------------------------------------------------------------------------
" auto-open nerdtree when vim starts in GUI mode
" if has('gui_running')
"   autocmd vimenter * NERDTree
" endif

" open NERDTree with Ctrl+n
map <C-n> :NERDTreeToggle<CR>
" close vim if only open window is the NERDTree
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif

" ------------------------------------------------------------------------------
" AIRLINE
" ------------------------------------------------------------------------------
let g:airline_powerline_fonts = 1

" ------------------------------------------------------------------------------
" FORTRAN
" ------------------------------------------------------------------------------
let fortran_free_source=1
let fortran_have_tabs=1
"let fortran_more_precise=1
let fortran_do_enddo=1
if has('syntax') && (&t_Co > 2)
    syntax enable
endif


" ------------------------------------------------------------------------------

" ------------------------------------------------------------------------------
" jump to last position when reopening a file
" ------------------------------------------------------------------------------
if has("autocmd")
  au BufReadPost * if line("'\"") > 0 && line("'\"") <= line("$")
    \| exe "normal! g'\"" | endif
endif
